{
  "name": "ChoombasProject",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        912
      ],
      "id": "610a01d2-13ce-4854-98b9-5288db769266",
      "name": "Telegram Trigger",
      "webhookId": "e596cc95-30dd-4a70-a183-2b077a66a367",
      "credentials": {
        "telegramApi": {
          "id": "FNd5VUe1tZm8dvAH",
          "name": "AkademChoombas_bot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.document }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "db1dfcac-76a8-41d2-a7f9-557e2227c6e8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "document"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ae67b6c1-ed20-4651-be20-a7e64c630ec2",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "start"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -224,
        912
      ],
      "id": "66e54307-12b4-4ccd-90f6-dca792e64c30",
      "name": "Switch"
    },
    {
      "parameters": {
        "binaryPropertyName": "=data"
      },
      "name": "Read PDF",
      "type": "n8n-nodes-base.readPDF",
      "position": [
        80,
        912
      ],
      "typeVersion": 1,
      "id": "c65835b3-8626-446a-bf55-3c756bfefc61"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://5.130.46.22:1212/generate/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-key",
              "value": "BC1AD4CB882253B3A9F51A69D50A2F64"
            },
            {
              "name": "x-secret",
              "value": "A3039B34726711ADBEF47CA237EC67CF"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        640
      ],
      "id": "a532c7f4-0688-4ff5-be57-c318e3cdde86",
      "name": "HTTP Request - Generate",
      "executeOnce": false
    },
    {
      "parameters": {
        "url": "=https://api-key.fusionbrain.ai/key/api/v1/pipeline/status/{{$json.uuid}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Key",
              "value": "Key BC1AD4CB882253B3A9F51A69D50A2F64"
            },
            {
              "name": "X-Secret",
              "value": "Secret A3039B34726711ADBEF47CA237EC67CF"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        640
      ],
      "id": "b00ec7d2-eab9-499a-b7aa-06003934d0de",
      "name": "HTTP Request4",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 500,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0620c054-2b60-4122-bcd7-bac089e6e4d5",
              "leftValue": "={{ $json.status }}",
              "rightValue": "DONE",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1728,
        640
      ],
      "id": "e3c1b0e9-efaf-47b9-b15a-d00a72dec6cc",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2000,
        752
      ],
      "id": "45a0c250-0a84-4e87-8e0c-6a5216b32cfc",
      "name": "Wait1",
      "webhookId": "aab7e75a-7a6c-48fb-8bc5-252976be3051"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "=result.files[0]",
        "binaryPropertyName": "frame",
        "options": {
          "fileName": "frame.png"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2208,
        624
      ],
      "id": "9105de49-550c-443f-a342-acc84f51056e",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "jsCode": "const result = [];\n\nfor (const item of items) {\n  const out = $item(\"0\").$node[\"If\"].json[\"output\"];\n  try {\n    let arr = JSON.parse(out);\n    if (typeof arr === 'string') arr = JSON.parse(arr); // на всякий случай\n    if (!Array.isArray(arr)) {\n      // если это не массив — положим как один item\n      result.push({ json: arr });\n    } else {\n      for (const obj of arr) {\n        result.push({ json: obj });\n      }\n    }\n  } catch (err) {\n    // если не удалось распарсить — возвращаем исходный item с ошибкой\n    result.push({ json: { _original_output: out, _parse_error: err.message } });\n  }\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        976
      ],
      "id": "dc1fce2a-502e-4163-acde-8c837ac2e8dd",
      "name": "GenearteJSON"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Сформируй все данные, что указаны в твоей роли, основываясь на текст: \"{{ $json.info.Title || \"\" }} {{ $json.text }}\"",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**РОЛЬ И ЦЕЛЬ**\nТы — эксперт-конструктор промптов для генерации кадров комикса. Твоя задача: разбить предоставленный текст на логические сцены и для каждой сцены вывести ОДИН JSON-объект с ровно четырьмя полями.\n\n**СТРОГИЙ ФОРМАТ ВЫВОДА**\n*   Массив JSON-объектов. Каждый объект строго:\n    {\n      \"prompt\": \"[Детальное описание сцены на русском. ДЛИНА НЕ ДОЛЖНА ПРЕВЫШАТЬ 400 СИМВОЛОВ!]\",\n      \"negative_prompt\": \"текст, надписи, логотипы, речевые пузыри, бренды, насилие, оружие, кровь, секс, обнаженка, водяные знаки, плохое качество, размытость, артефакты\",\n      \"father_line\": \"[реплика отца]\",\n      \"son_line\": \"[реплика сына]\"\n    }\n\n**ЖЕСТКИЕ ПРАВИЛА ДЛЯ ПОЛЯ `prompt`**\n1.  **Язык и длина:** Только на русском. **Строго до 400 символов.** Если длина превышена — немедленно сократи описание, сохраняя суть.\n2.  **Структура `prompt` (соблюдай порядок):**\n    *   **Строка 1 (Обязательный блок):** `\"Отец: кожаный плащ, темно-серый свитер, часы на левой руке, шрам у брови. Сын: джинсовая куртка с нашивками, белая футболка, рюкзак на плече.\"` (Эта строка неизменна для всех кадров).\n    *   **Строка 2 (Локация и фон):** Кратко: `\"В гараже: старый автомобиль, верстак с инструментами, стеллаж с деталями.\"`\n    *   **Строка 3 (Позиция и действие):** Указать расположение (слева/справа/центр), основную позу (стоит/сидит/наклонен) и ключевое действие. *Пример: \"Отец справа, стоит у верстака, показывает на двигатель. Сын слева, внимательно смотрит на указанное место.\"*\n    *   **Строка 4 (Мимика и план):** Описать выражение лиц и общий план кадра. *Пример: \"Отец улыбается, сын смотрит с интересом. Средний план.\"*\n3.  **Запрещено:** Упоминать стиль rendering'а (например, \"в стиле аниме\"), добавлять теги или инструкции для ИИ. Только визуальное описание.\n\n**КОНСИСТЕНТНОСТЬ ПЕРСОНАЖЕЙ**\nНачальный блок-идентификатор (`\"Отец: кожаный плащ... Сын: джинсовая куртка...\"`) должен быть **одинаковым в начале каждого `prompt`** без изменений.\n\n**СТРАТЕГИЯ СОКРАЩЕНИЯ ДО 400 СИМВОЛОВ (Приоритет)**\nЕсли длина превышена, сокращай в таком порядке:\n1.  **Сохрани** блок-идентификатор и ключевые действия.\n2.  **Сократи** описание фона до 2-х самых важных предметов.\n3.  **Упрости** описание поз, оставив только самое главное (например, \"рука указывает\" вместо \"правая рука вытянута, указательный палец направлен\").\n4.  **Объедини** пункты о мимике и действии в одно короткое предложение.\n\n**РЕПЛИКИ**\n*   `son_line`: Любознательная, уточняющая, внимательная фраза.\n*   `father_line`: Мудрая, ясная, конструктивная фраза.\n*   Каждая реплика — отражает суть логического блока.\n\n**ПРИМЕР (Соответствует новому лимиту в 400 символов)**\n{\n  \"prompt\": \"Отец: кожаный плащ, темно-серый свитер, часы на левой руке, шрам у брови. Сын: джинсовая куртка с нашивками, белая футболка, рюкзак на плече. В гараже: автомобиль, верстак. Отец справа, показывает на двигатель. Сын слева, внимательно слушает. Оба серьезны. Средний план.\",\n  \"negative_prompt\": \"текст, надписи, логотипы, речевые пузыри, бренды, насилие, оружие, кровь, секс, обнаженка, водяные знаки, плохое качество, размытость, артефакты\",\n  \"son_line\": \"Отец, а где находится тот узел, про который ты говорил?\"\n  \"father_line\": \"Вот здесь самый важный узел. Запомни, как он устроен.\",\n}\n---\n\n### Ключевые улучшения в новой версии:\n\n1.  **Жесткий приоритет длины Prmopt'а на один логический блок:** Требование **400 символов** вынесено на первый план и является центральным.\n2.  **Упрощенная структура:** Число обязательных \"строк\" в `prompt` сокращено с 6 до 4. Это убирает водность и заставляет быть лаконичным.\n3.  **Агрессивная стратегия сокращения:** Четкий приоритет, что сохранять, а чем жертвовать. Убраны требования к точным цифрам (см, градусы), так как они \"съедают\" много символов.\n4.  **Оптимизированный `negative_prompt`:** Более короткий, но охватывающий все запрещенные категории и добавляющий типичные артефакты генерации (\"плохое качество, размытость\").\n5.  **Образец-пример,** который укладывается в лимит и сразу задает ожидаемый уровень детализации.\n6.  **Убраны повторы:** Удалены дублирующиеся инструкции внутри исходного промпта для большей чистоты.\n\n**ПОМНИ: ВЫВОД ТОЛЬКО JSON ФОРМАТА - ВСЕ, КРОМЕ НЕГО ЗАПРЕЩЕНО**"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        336,
        912
      ],
      "id": "50a09405-55cf-44c9-9c6b-9c8dcc48460f",
      "name": "AI Agent",
      "executeOnce": false
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        336,
        1088
      ],
      "id": "59da3a43-ab79-4590-a8e0-dbb940b4ec51",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "ettM9QMfkfBjXifj",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $item(\"0\").$node[\"Telegram Trigger\"].json[\"message\"][\"from\"][\"id\"] }}",
        "binaryData": true,
        "binaryPropertyName": "=frame",
        "additionalFields": {
          "caption": "=<b>Сын:</b> {{ $json.son_line }}\n\n<b>Отец:</b> {{ $json.father_line }}",
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2928,
        960
      ],
      "id": "eb299486-fb92-46fa-a0ef-91bc8ed1257f",
      "name": "Send a photo message",
      "webhookId": "4e8a9e94-f230-4310-a9a8-c38839614b74",
      "credentials": {
        "telegramApi": {
          "id": "FNd5VUe1tZm8dvAH",
          "name": "AkademChoombas_bot"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2624,
        960
      ],
      "id": "84c31d57-5bd8-41ed-98b7-8282b4e0b8b6",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fb581a70-8b53-4cf9-a543-e5ccbe0f35ed",
              "leftValue": "={{ $json.output.length }}",
              "rightValue": 500,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        992
      ],
      "id": "ad037a7c-40a0-4d28-b9c9-5c8a488d389e",
      "name": "If"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "Привет, комикс-герой от команды Akadem Choombas! 🦸  Я превращу любой скучный PDF в увлекательный комикс про Отца и Сына.  Просто закидывай документ — остальное сделаем мы! 📚✨",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -32,
        1104
      ],
      "id": "9e8891b1-9169-4259-96ea-46ed4b87b3f5",
      "name": "Send a text message2",
      "webhookId": "9ec2bc9f-5ce8-449c-860d-d0926908c8ac",
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "FNd5VUe1tZm8dvAH",
          "name": "AkademChoombas_bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Read PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Generate": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GenearteJSON": {
      "main": [
        [
          {
            "node": "HTTP Request - Generate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a photo message": {
      "main": [
        []
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "GenearteJSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "43944d18-28d9-4579-b1bf-4150af0eec46",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "83ceb29df94fc3072e3643d7fccc65cf595425deaa9cda5b2b8f17a94ed1d404"
  },
  "id": "lSS3E4WPFuc7airh",
  "tags": []
}
